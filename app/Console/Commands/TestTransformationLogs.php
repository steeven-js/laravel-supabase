<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\TransformationLogService;

class TestTransformationLogs extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'transformation:test-logs
                        {scenario=success : Le sc√©nario √† tester (success, error, complex)}
                        {--devis=DV-25-TEST : Num√©ro de devis pour le test}
                        {--client=Jean Dupont : Nom du client pour le test}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Teste le syst√®me de logs de transformation avec diff√©rents sc√©narios';

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $scenario = $this->argument('scenario');
        $devisNumero = $this->option('devis');
        $clientNom = $this->option('client');

        $this->info("üß™ Test du syst√®me de logs de transformation");
        $this->info("Sc√©nario: {$scenario}");
        $this->info("Devis: {$devisNumero}");
        $this->info("Client: {$clientNom}");
        $this->newLine();

        switch ($scenario) {
            case 'success':
                return $this->testSuccessScenario($devisNumero, $clientNom);
            case 'error':
                return $this->testErrorScenario($devisNumero, $clientNom);
            case 'complex':
                return $this->testComplexScenario($devisNumero, $clientNom);
            default:
                $this->error("Sc√©nario inconnu: {$scenario}");
                $this->info("Sc√©narios disponibles: success, error, complex");
                return Command::FAILURE;
        }
    }

    /**
     * Test d'un sc√©nario de transformation r√©ussie
     */
    private function testSuccessScenario(string $devisNumero, string $clientNom): int
    {
        $this->info("üöÄ Test du sc√©nario SUCCESS");

        // D√©marrer la session
        $sessionId = TransformationLogService::startTransformationSession($devisNumero, $clientNom);
        $this->info("Session d√©marr√©e: {$sessionId}");

        // Simuler les param√®tres
        $params = [
            'date_facture' => now()->format('Y-m-d'),
            'date_echeance' => now()->addDays(30)->format('Y-m-d'),
            'conditions_paiement' => 'Net 30 jours',
            'notes_facture' => 'Facture g√©n√©r√©e automatiquement depuis le devis'
        ];
        TransformationLogService::logTransformationParams($params);

        // Simuler la d√©sactivation des notifications
        TransformationLogService::logNotificationOptimization(true);

        // Simuler la transformation
        sleep(1); // Simuler du traitement
        TransformationLogService::logEvent("üîÑ D√©but de la transformation en base de donn√©es");

        $factureNumero = "FACT-25-" . rand(1000, 9999);
        TransformationLogService::logFactureCreated($factureNumero);

        $montantHT = 1250.00;
        $montantTTC = 1500.00;
        TransformationLogService::logMontantsCalculated($montantHT, $montantTTC);

        $nbLignes = 3;
        TransformationLogService::logLignesCopied($nbLignes);

        TransformationLogService::logEvent("üìÖ Date d'envoi admin d√©finie");

        // R√©activer les notifications
        TransformationLogService::logNotificationOptimization(false);

        // Simuler les emails
        TransformationLogService::logEvent("üìß Envoi email client en cours...");
        sleep(1);
        TransformationLogService::logEmailSent('client', 'client@example.com');

        TransformationLogService::logEvent("üì® Envoi email admin en cours...");
        TransformationLogService::logEmailSent('admin', 'admin@madinia.com');

        TransformationLogService::logEvent("üîî Notification envoy√©e aux administrateurs");

        // Simuler les performances
        $executionTime = 2500.0; // 2.5 secondes
        TransformationLogService::logPerformance($executionTime, 15);

        // Terminer avec succ√®s
        TransformationLogService::endTransformationSession(true, [
            'facture_numero' => $factureNumero,
            'execution_time_ms' => $executionTime
        ]);

        $this->info("‚úÖ Test SUCCESS termin√© avec succ√®s!");
        $this->info("Facture cr√©√©e: {$factureNumero}");
        $this->info("Temps d'ex√©cution: {$executionTime}ms");

        return Command::SUCCESS;
    }

    /**
     * Test d'un sc√©nario d'erreur
     */
    private function testErrorScenario(string $devisNumero, string $clientNom): int
    {
        $this->info("üí• Test du sc√©nario ERROR");

        // D√©marrer la session
        $sessionId = TransformationLogService::startTransformationSession($devisNumero, $clientNom);
        $this->info("Session d√©marr√©e: {$sessionId}");

        // Simuler les param√®tres
        $params = [
            'date_facture' => now()->format('Y-m-d'),
            'date_echeance' => now()->addDays(30)->format('Y-m-d'),
        ];
        TransformationLogService::logTransformationParams($params);

        // Simuler la d√©sactivation des notifications
        TransformationLogService::logNotificationOptimization(true);

        // Simuler une erreur durant la transformation
        sleep(1);
        TransformationLogService::logEvent("üîÑ D√©but de la transformation en base de donn√©es");

        try {
            // Simuler une exception
            throw new \Exception("Violation de contrainte unique sur le num√©ro de facture", 23000);
        } catch (\Exception $e) {
            TransformationLogService::logError("√âchec de la transformation", $e);
        }

        // Terminer avec √©chec
        TransformationLogService::endTransformationSession(false, [
            'error_message' => 'Violation de contrainte unique sur le num√©ro de facture',
            'error_file' => 'FactureService.php',
            'error_line' => 142
        ]);

        $this->error("‚ùå Test ERROR termin√© - Erreur simul√©e avec succ√®s!");

        return Command::SUCCESS;
    }

    /**
     * Test d'un sc√©nario complexe avec emails partiels
     */
    private function testComplexScenario(string $devisNumero, string $clientNom): int
    {
        $this->info("üéØ Test du sc√©nario COMPLEX");

        // D√©marrer la session
        $sessionId = TransformationLogService::startTransformationSession($devisNumero, $clientNom);
        $this->info("Session d√©marr√©e: {$sessionId}");

        // Transformation r√©ussie
        $params = [
            'date_facture' => now()->format('Y-m-d'),
            'date_echeance' => now()->addDays(30)->format('Y-m-d'),
            'conditions_paiement' => 'Net 15 jours',
            'notes_facture' => 'Transformation complexe avec erreurs d\'email'
        ];
        TransformationLogService::logTransformationParams($params);

        TransformationLogService::logNotificationOptimization(true);

        TransformationLogService::logEvent("üîÑ D√©but de la transformation en base de donn√©es");

        $factureNumero = "FACT-25-" . rand(1000, 9999);
        TransformationLogService::logFactureCreated($factureNumero);

        TransformationLogService::logMontantsCalculated(2100.00, 2520.00);
        TransformationLogService::logLignesCopied(5);
        TransformationLogService::logEvent("üìÖ Date d'envoi admin d√©finie");

        TransformationLogService::logNotificationOptimization(false);

        // Email client r√©ussi
        TransformationLogService::logEvent("üìß Envoi email client en cours...");
        TransformationLogService::logEmailSent('client', 'client@example.com');

        // Email admin √©chou√©
        TransformationLogService::logEvent("üì® Envoi email admin en cours...");
        try {
            throw new \Exception("Connexion SMTP refus√©e - timeout apr√®s 30 secondes");
        } catch (\Exception $e) {
            TransformationLogService::logError("√âchec envoi email admin", $e);
        }

        TransformationLogService::logEvent("üîî Notification envoy√©e aux administrateurs");

        $executionTime = 8500.0; // 8.5 secondes (lent)
        TransformationLogService::logPerformance($executionTime, 28);

        // Terminer avec succ√®s partiel
        TransformationLogService::endTransformationSession(true, [
            'facture_numero' => $factureNumero,
            'execution_time_ms' => $executionTime,
            'email_errors' => ['Erreur lors de l\'envoi de l\'email √† l\'admin : Connexion SMTP refus√©e']
        ]);

        $this->warn("‚ö†Ô∏è Test COMPLEX termin√© - Succ√®s partiel!");
        $this->info("Facture cr√©√©e: {$factureNumero}");
        $this->warn("Erreur email admin simul√©e");

        return Command::SUCCESS;
    }
}
