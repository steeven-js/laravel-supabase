<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class SyncPostgresSequences extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'db:sync-sequences {--force : Force la s√©quence au prochain ID m√™me si elle est plus √©lev√©e} {--dry-run : Affiche les changements sans les appliquer}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Synchronise les s√©quences PostgreSQL avec les valeurs max des tables';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $force = $this->option('force');
        $dryRun = $this->option('dry-run');

        $this->info('üîÑ Synchronisation des s√©quences PostgreSQL...');
        if ($dryRun) {
            $this->warn('Mode DRY RUN - Aucune modification ne sera appliqu√©e');
        }
        if ($force) {
            $this->info('Mode FORCE activ√© - Les s√©quences seront forc√©es au prochain ID disponible');
        }
        $this->newLine();

        // Tables principales avec leurs s√©quences
        $tables = [
            'historique' => 'historique_id_seq',
            'devis' => 'devis_id_seq',
            'factures' => 'factures_id_seq',
            'clients' => 'clients_id_seq',
            'entreprises' => 'entreprises_id_seq',
            'services' => 'services_id_seq',
            'lignes_devis' => 'lignes_devis_id_seq',
            'lignes_factures' => 'lignes_factures_id_seq',
            'users' => 'users_id_seq',
            'notifications' => 'notifications_id_seq',
            'email_templates' => 'email_templates_id_seq',
            'client_emails' => 'client_emails_id_seq',
            'opportunities' => 'opportunities_id_seq',
            'tickets' => 'tickets_id_seq',
            'todos' => 'todos_id_seq',
        ];

        $synced = 0;
        $errors = 0;

        foreach ($tables as $table => $sequence) {
            try {
                // V√©rifier si la table existe
                $tableExists = DB::select("SELECT to_regclass(?) IS NOT NULL as exists", [$table]);
                if (!$tableExists[0]->exists) {
                    $this->warn("‚ö†Ô∏è  Table '$table' n'existe pas, ignor√©e");
                    continue;
                }

                // V√©rifier si la s√©quence existe
                $sequenceExists = DB::select("SELECT to_regclass(?) IS NOT NULL as exists", [$sequence]);
                if (!$sequenceExists[0]->exists) {
                    $this->warn("‚ö†Ô∏è  S√©quence '$sequence' n'existe pas, ignor√©e");
                    continue;
                }

                // Obtenir les valeurs actuelles
                $maxId = DB::selectOne("SELECT COALESCE(MAX(id), 0) as max_id FROM $table")->max_id;
                $currentSeqValue = DB::selectOne("SELECT last_value FROM $sequence")->last_value;
                $nextAvailableId = $maxId + 1;

                // Afficher l'√©tat actuel
                $this->line("üìä $table:");
                $this->line("   - Max ID en table: $maxId");
                $this->line("   - S√©quence actuelle: $currentSeqValue");
                $this->line("   - Prochain ID disponible: $nextAvailableId");

                // D√©terminer la nouvelle valeur de s√©quence
                if ($force) {
                    // Mode force: toujours r√©gler au prochain ID disponible
                    $newSequenceValue = $nextAvailableId;
                    $action = "forc√©e";
                } else {
                    // Mode normal: prendre le maximum entre max_id et current_value
                    $newSequenceValue = max($maxId, $currentSeqValue);
                    $action = "synchronis√©e";
                }

                if ($currentSeqValue != $newSequenceValue) {
                    if (!$dryRun) {
                        // Appliquer le changement
                        DB::statement("SELECT setval('$sequence', $newSequenceValue)");
                        $this->info("   ‚úÖ S√©quence $action √† $newSequenceValue");
                    } else {
                        $this->comment("   üîÑ DRY RUN: S√©quence serait $action √† $newSequenceValue");
                    }
                    $synced++;
                } else {
                    $this->comment("   ‚úì Aucun changement n√©cessaire");
                }

                $this->newLine();

            } catch (\Exception $e) {
                $this->error("‚ùå Erreur pour $table: " . $e->getMessage());
                $errors++;
            }
        }

        // R√©sum√© final
        $this->info("üìà R√©sum√© de la synchronisation:");
        $this->table(
            ['M√©trique', 'Valeur'],
            [
                ['Tables trait√©es', count($tables)],
                ['S√©quences modifi√©es', $synced],
                ['Erreurs', $errors],
            ]
        );

        if ($dryRun && $synced > 0) {
            $this->newLine();
            $this->comment("üí° Pour appliquer ces changements, ex√©cutez la commande sans --dry-run:");
            $this->comment("php artisan db:sync-sequences" . ($force ? " --force" : ""));
        }

        if ($errors > 0) {
            $this->error("‚ö†Ô∏è  $errors erreurs rencontr√©es");
            return 1;
        }

        if ($synced > 0) {
            $this->info("üéâ Synchronisation termin√©e avec succ√®s!");
        } else {
            $this->info("‚úÖ Toutes les s√©quences sont d√©j√† synchronis√©es.");
        }

        return 0;
    }
}
